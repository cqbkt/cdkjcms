/*!
 * jsonp.js
 * Created by Kilian Ciuffolo on Dec 25, 2013
 * Copyright (c) 2013 Kilian Ciuffolo, me@nailik.org
 */

'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } step("next"); }); }; }

const JSONPStream = require('./jsonp-stream');

module.exports = function jsonp(options) {
  options = options || {};

  let domain = options.domain || '.default.lan';
  let callbackName = options.callbackName || 'callback';
  let iframeHtmlTemplate = ['<!doctype html><html><head><meta http-equiv="Content-Type" content="text/html charset=utf-8"/><script type="text/javascript">document.domain = "' + domain + '";parent.', '(', ');</script></head><body></body></html>'];

  return (function () {
    var ref = _asyncToGenerator(function* (ctx, next) {
      yield next();

      let startChunk, endChunk;
      let callback = ctx.query[callbackName];

      if (!callback) return;
      if (ctx.body == null) return;

      if (ctx.method === 'POST') {
        ctx.type = 'html';
        startChunk = iframeHtmlTemplate[0] + callback + iframeHtmlTemplate[1];
        endChunk = iframeHtmlTemplate[2];
      } else {
        ctx.type = 'text/javascript';
        startChunk = ';' + callback + '(';
        endChunk = ');';
      }

      // handle streams
      if (typeof ctx.body.pipe === 'function') {
        ctx.body = ctx.body.pipe(new JSONPStream({
          startChunk: startChunk,
          endChunk: endChunk
        }));
      } else {
        ctx.body = startChunk + JSON.stringify(ctx.body, null, ctx.app.jsonSpaces) + endChunk;

        // JSON parse vs eval fix. https://github.com/rack/rack-contrib/pull/37
        ctx.body = ctx.body.replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
      }
    });

    return function _jsonp(_x, _x2) {
      return ref.apply(this, arguments);
    };
  })();
};